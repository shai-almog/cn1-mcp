name: MCP CI

on:
  push:
    branches: ["main", "master"]
  pull_request:
  release:
    types: [published]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install MCP Validator dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          git clone --depth 1 https://github.com/Janix-ai/mcp-validator.git mcp-validator
          python -m pip install -r mcp-validator/requirements.txt
          echo "MCP_VALIDATOR_PATH=$(pwd)/mcp-validator" >> "$GITHUB_ENV"
          current_pythonpath="${PYTHONPATH:-}"
          if [ -n "$current_pythonpath" ]; then
            echo "PYTHONPATH=$(pwd)/mcp-validator:$current_pythonpath" >> "$GITHUB_ENV"
          else
            echo "PYTHONPATH=$(pwd)/mcp-validator" >> "$GITHUB_ENV"
          fi

      - name: Build, test and analyze in MCP stdio mode
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: ./mvnw -B -ntp verify

      - name: Run MCP compliance validation (STDIO)
        run: |
          set -euo pipefail
          jar_path=$(find target -maxdepth 1 -type f -name 'mcp-*.jar' ! -name '*.original' | head -n 1)
          if [ -z "$jar_path" ]; then
            echo "Unable to locate built jar for MCP compliance validation"
            find target -maxdepth 1 -type f -name '*.jar' -print || true
            exit 1
          fi
          mkdir -p target
          log_path="target/mcp-compliance-stdio.log"
          python -m mcp_testing.scripts.compliance_report \
            --protocol-version 2025-06-18 \
            --test-timeout 60 \
            --tools-timeout 30 \
            --server-command "env SPRING_PROFILES_ACTIVE=stdio java -Dorg.springframework.boot.logging.LoggingSystem=none -Dloader.main=com.codename1.server.stdiomcp.StdIoMcpMain -jar ${jar_path}" \
            2>&1 | tee "$log_path"

      - name: Generate static analysis HTML summaries
        if: always()
        env:
          QUALITY_REPORT_GENERATE_HTML_ONLY: "1"
          QUALITY_REPORT_SERVER_URL: ${{ github.server_url }}
          QUALITY_REPORT_REPOSITORY: ${{ github.repository }}
          QUALITY_REPORT_REF: ${{ github.event.pull_request.head.sha || github.sha }}
        run: python3 .github/scripts/generate-quality-report.py

      - name: Collect static analysis outputs
        if: always()
        run: |
          set -euo pipefail
          mkdir -p quality-artifacts/static-analysis
          shopt -s nullglob
          for path in target/spotbugs*.xml target/pmd.xml target/checkstyle-result.xml; do
            if [ -f "$path" ]; then
              cp "$path" quality-artifacts/static-analysis/
            fi
          done
          if [ -d target/site ]; then
            mkdir -p quality-artifacts/static-analysis/site
            cp -R target/site/. quality-artifacts/static-analysis/site/
          fi
          if [ -d target/quality-report ]; then
            mkdir -p quality-artifacts/static-analysis/html
            cp -R target/quality-report/. quality-artifacts/static-analysis/html/
          fi
          if [ "$(find quality-artifacts/static-analysis -type f | wc -l)" -eq 0 ]; then
            echo "No static analysis outputs were generated." > quality-artifacts/static-analysis/README.txt
          fi

      - name: Upload static analysis reports
        if: always()
        id: upload-static-analysis
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: quality-artifacts/static-analysis

      - name: Upload SpotBugs HTML report
        if: always() && hashFiles('target/quality-report/spotbugs.html') != ''
        id: upload-spotbugs-html
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-html-report
          path: target/quality-report/spotbugs.html

      - name: Upload PMD HTML report
        if: always() && hashFiles('target/quality-report/pmd.html') != ''
        id: upload-pmd-html
        uses: actions/upload-artifact@v4
        with:
          name: pmd-html-report
          path: target/quality-report/pmd.html

      - name: Upload Checkstyle HTML report
        if: always() && hashFiles('target/quality-report/checkstyle.html') != ''
        id: upload-checkstyle-html
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-html-report
          path: target/quality-report/checkstyle.html

      - name: Upload JaCoCo coverage report
        if: always() && hashFiles('target/site/jacoco/index.html') != ''
        id: upload-jacoco-html
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html-report
          path: target/site/jacoco

      - name: Publish HTML previews
        if: always() && github.server_url == 'https://github.com' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        id: publish-previews
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SERVER_URL: ${{ github.server_url }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
        run: |
          set -euo pipefail
          if [ "${SERVER_URL}" != "https://github.com" ]; then
            echo "HTML previews are only published for github.com instances."
            exit 0
          fi
          run_dir="runs/${RUN_ID}-${RUN_ATTEMPT}"
          tmp_dir=$(mktemp -d)
          dest_dir="${tmp_dir}/${run_dir}"
          mkdir -p "${dest_dir}"
          has_content=0
          if compgen -G "target/quality-report/*.html" > /dev/null; then
            mkdir -p "${dest_dir}/static-analysis"
            cp target/quality-report/*.html "${dest_dir}/static-analysis/"
            has_content=1
          fi
          if [ -d target/site/jacoco ] && [ -f target/site/jacoco/index.html ]; then
            mkdir -p "${dest_dir}/coverage"
            cp -R target/site/jacoco/. "${dest_dir}/coverage/"
            has_content=1
          fi
          if [ "${has_content}" -eq 0 ]; then
            echo "No HTML outputs detected; skipping preview publishing."
            exit 0
          fi
          printf '%s\n%s\n%s\n' \
            '# Quality report previews' \
            '' \
            'This branch is automatically managed by the MCP CI workflow and may be force-pushed.' \
            > "${tmp_dir}/README.md"
          git -C "${tmp_dir}" init -b previews >/dev/null
          git -C "${tmp_dir}" config user.name "github-actions[bot]"
          git -C "${tmp_dir}" config user.email "github-actions[bot]@users.noreply.github.com"
          git -C "${tmp_dir}" add .
          git -C "${tmp_dir}" commit -m "Publish quality report previews for run ${RUN_ID} (attempt ${RUN_ATTEMPT})" >/dev/null
          remote_url="${SERVER_URL}/${REPOSITORY}.git"
          token_remote_url="${remote_url/https:\/\//https://x-access-token:${GITHUB_TOKEN}@}"
          git -C "${tmp_dir}" push --force "${token_remote_url}" previews:quality-report-previews >/dev/null
          commit_sha=$(git -C "${tmp_dir}" rev-parse HEAD)
          raw_base="https://raw.githubusercontent.com/${REPOSITORY}/${commit_sha}/${run_dir}"
          preview_base="https://htmlpreview.github.io/?${raw_base}"
          {
            echo "commit=${commit_sha}"
            echo "run_path=${run_dir}"
          } >> "$GITHUB_OUTPUT"
          if [ -f "${tmp_dir}/${run_dir}/static-analysis/spotbugs.html" ]; then
            echo "spotbugs_url=${preview_base}/static-analysis/spotbugs.html" >> "$GITHUB_OUTPUT"
          fi
          if [ -f "${tmp_dir}/${run_dir}/static-analysis/pmd.html" ]; then
            echo "pmd_url=${preview_base}/static-analysis/pmd.html" >> "$GITHUB_OUTPUT"
          fi
          if [ -f "${tmp_dir}/${run_dir}/static-analysis/checkstyle.html" ]; then
            echo "checkstyle_url=${preview_base}/static-analysis/checkstyle.html" >> "$GITHUB_OUTPUT"
          fi
          if [ -f "${tmp_dir}/${run_dir}/coverage/index.html" ]; then
            echo "jacoco_url=${preview_base}/coverage/index.html" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate quality report
        env:
          QUALITY_REPORT_SERVER_URL: ${{ github.server_url }}
          QUALITY_REPORT_REPOSITORY: ${{ github.repository }}
          QUALITY_REPORT_REF: ${{ github.event.pull_request.head.sha || github.sha }}
          SPOTBUGS_REPORT_URL: ${{ steps.upload-spotbugs-html.outputs.artifact-url || steps.upload-static-analysis.outputs.artifact-url }}
          PMD_REPORT_URL: ${{ steps.upload-pmd-html.outputs.artifact-url || steps.upload-static-analysis.outputs.artifact-url }}
          CHECKSTYLE_REPORT_URL: ${{ steps.upload-checkstyle-html.outputs.artifact-url || steps.upload-static-analysis.outputs.artifact-url }}
          SPOTBUGS_HTML_URL: ${{ steps.publish-previews.outputs.spotbugs_url }}
          PMD_HTML_URL: ${{ steps.publish-previews.outputs.pmd_url }}
          CHECKSTYLE_HTML_URL: ${{ steps.publish-previews.outputs.checkstyle_url }}
          JACOCO_HTML_URL: ${{ steps.publish-previews.outputs.jacoco_url }}
          JACOCO_REPORT_URL: ${{ steps.upload-jacoco-html.outputs.artifact-url || steps.upload-static-analysis.outputs.artifact-url }}
        run: python3 .github/scripts/generate-quality-report.py

      - name: Upload quality report artifact
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

      - name: Publish quality report comment
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const marker = '<!-- quality-report -->';
            const body = `${marker}\n${fs.readFileSync('quality-report.md', 'utf8')}`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner,
                repo,
                issue_number,
                per_page: 100,
              });
              const existing = comments.find(
                (comment) => comment.user?.type === 'Bot' && comment.body?.includes(marker),
              );
              if (existing) {
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: existing.id,
                  body,
                });
              } else {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body,
                });
              }
            } catch (error) {
              if (error?.status === 403 || error?.response?.status === 403) {
                core.warning(
                  'Skipping quality report comment because the workflow token lacks permission (403).'
                );
                core.info(
                  `Status: ${error.status ?? error.response?.status}; Message: ${error.message ?? error}`
                );
              } else {
                throw error;
              }
            }

      - name: Prepare cross-platform jar
        run: |
          set -euo pipefail
          mkdir -p dist
          jar_path=$(find target -maxdepth 1 -type f -name 'mcp-*.jar' ! -name '*.original' | head -n 1)
          if [ -z "$jar_path" ]; then
            echo "Unable to locate built jar in target/"
            find target -maxdepth 1 -type f -name '*.jar' -print
            exit 1
          fi
          cp "$jar_path" dist/cn1-mcp-stdio.jar

      - name: Upload cross-platform jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: cn1-mcp-stdio-jar
          path: dist/cn1-mcp-stdio.jar

  native-images:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            mvnw: ./mvnw
            shell: bash
            artifact-name: cn1-mcp-stdio-linux
            binary-path: target/cn1-mcp-stdio
            artifact-file-name: cn1-mcp-stdio-linux
            binary-glob: cn1-mcp-stdio*
          - os: macos-latest
            mvnw: ./mvnw
            shell: bash
            artifact-name: cn1-mcp-stdio-macos
            binary-path: target/cn1-mcp-stdio
            artifact-file-name: cn1-mcp-stdio-macos
            binary-glob: cn1-mcp-stdio*
          - os: windows-latest
            mvnw: ./mvnw.cmd
            shell: pwsh
            artifact-name: cn1-mcp-stdio-windows
            binary-path: target/cn1-mcp-stdio.exe
            artifact-file-name: cn1-mcp-stdio-windows.exe
            binary-glob: cn1-mcp-stdio*.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: graalvm-community
          java-version: '21'
          components: native-image
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run MCP tests with native profile (POSIX)
        if: runner.os != 'Windows'
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: ./mvnw -B -ntp -Pnative test
        shell: bash

      - name: Run MCP tests with native profile (Windows)
        if: runner.os == 'Windows'
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: .\mvnw.cmd -B -ntp -Pnative test
        shell: pwsh

      - name: Build GraalVM native image (stdio mode, POSIX)
        if: runner.os != 'Windows'
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: ./mvnw -B -ntp -Pnative -DskipTests native:compile
        shell: bash

      - name: Build GraalVM native image (stdio mode, Windows)
        if: runner.os == 'Windows'
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: .\mvnw.cmd -B -ntp -Pnative -DskipTests native:compile
        shell: pwsh

      - name: Prepare artifact (POSIX)
        if: runner.os != 'Windows'
        run: |
          set -euo pipefail
          mkdir -p native-dist
          binary="${{ matrix.binary-path }}"
          if [ ! -f "$binary" ]; then
            echo "Expected native binary not found at $binary"
            echo "Listing contents of target for debugging:"
            find target -maxdepth 3 -type f -print || true
            binary=$(find target -maxdepth 3 -type f -name "${{ matrix.binary-glob }}" | head -n 1)
            if [ -z "$binary" ]; then
              echo "Unable to locate native binary"
              exit 1
            fi
            echo "Using detected binary at $binary"
          fi
          cp "$binary" "native-dist/${{ matrix.artifact-file-name }}"
          chmod +x "native-dist/${{ matrix.artifact-file-name }}"
        shell: bash

      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          New-Item -ItemType Directory -Path native-dist -Force | Out-Null
          $binary = "${{ matrix.binary-path }}"
          if (-not (Test-Path $binary)) {
            Write-Host "Expected native binary not found at $binary"
            Write-Host "Listing contents of target for debugging:"
            Get-ChildItem -Recurse -File target | ForEach-Object { $_.FullName }
            $binary = Get-ChildItem -Recurse -File target -Filter "${{ matrix.binary-glob }}" | Select-Object -First 1
            if (-not $binary) {
              throw "Unable to locate native binary"
            }
            Write-Host "Using detected binary at $($binary.FullName)"
          }
          $binaryPath = if ($binary -is [System.IO.FileInfo]) { $binary.FullName } else { $binary }
          Copy-Item $binaryPath "native-dist/${{ matrix.artifact-file-name }}" -Force
        shell: pwsh

      - name: Upload native binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: native-dist/${{ matrix.artifact-file-name }}

  publish-release:
    if: github.event_name == 'release'
    needs:
      - build
      - native-images
    runs-on: ubuntu-latest
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Attach assets to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-assets/cn1-mcp-stdio-jar/cn1-mcp-stdio.jar
            release-assets/cn1-mcp-stdio-linux/cn1-mcp-stdio-linux
            release-assets/cn1-mcp-stdio-macos/cn1-mcp-stdio-macos
            release-assets/cn1-mcp-stdio-windows/cn1-mcp-stdio-windows.exe
