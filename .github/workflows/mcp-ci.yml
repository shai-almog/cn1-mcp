name: MCP CI

on:
  push:
    branches: ["main", "master"]
  pull_request:
  release:
    types: [published]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build and test in MCP stdio mode
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: ./mvnw -B -ntp verify

      - name: SonarQube scan
        if: github.event_name == 'pull_request' && env.SONAR_HOST_URL != '' && env.SONAR_TOKEN != '' && env.SONAR_PROJECT_KEY != ''
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.projectName=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src
            -Dsonar.java.binaries=target/classes
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
            -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}

      - name: Prepare cross-platform jar
        run: |
          set -euo pipefail
          mkdir -p dist
          jar_path=$(find target -maxdepth 1 -type f -name 'mcp-*.jar' ! -name '*.original' | head -n 1)
          if [ -z "$jar_path" ]; then
            echo "Unable to locate built jar in target/"
            find target -maxdepth 1 -type f -name '*.jar' -print
            exit 1
          fi
          cp "$jar_path" dist/cn1-mcp-stdio.jar

      - name: Upload cross-platform jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: cn1-mcp-stdio-jar
          path: dist/cn1-mcp-stdio.jar

  native-images:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            mvnw: ./mvnw
            shell: bash
            artifact-name: cn1-mcp-stdio-linux
            binary-path: target/cn1-mcp-stdio
            artifact-file-name: cn1-mcp-stdio-linux
            binary-glob: cn1-mcp-stdio*
          - os: macos-latest
            mvnw: ./mvnw
            shell: bash
            artifact-name: cn1-mcp-stdio-macos
            binary-path: target/cn1-mcp-stdio
            artifact-file-name: cn1-mcp-stdio-macos
            binary-glob: cn1-mcp-stdio*
          - os: windows-latest
            mvnw: ./mvnw.cmd
            shell: pwsh
            artifact-name: cn1-mcp-stdio-windows
            binary-path: target/cn1-mcp-stdio.exe
            artifact-file-name: cn1-mcp-stdio-windows.exe
            binary-glob: cn1-mcp-stdio*.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: graalvm-community
          java-version: '21'
          components: native-image
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run MCP tests with native profile (POSIX)
        if: runner.os != 'Windows'
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: ./mvnw -B -ntp -Pnative test
        shell: bash

      - name: Run MCP tests with native profile (Windows)
        if: runner.os == 'Windows'
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: .\mvnw.cmd -B -ntp -Pnative test
        shell: pwsh

      - name: Build GraalVM native image (stdio mode, POSIX)
        if: runner.os != 'Windows'
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: ./mvnw -B -ntp -Pnative -DskipTests native:compile
        shell: bash

      - name: Build GraalVM native image (stdio mode, Windows)
        if: runner.os == 'Windows'
        env:
          SPRING_PROFILES_ACTIVE: stdio
        run: .\mvnw.cmd -B -ntp -Pnative -DskipTests native:compile
        shell: pwsh

      - name: Prepare artifact (POSIX)
        if: runner.os != 'Windows'
        run: |
          set -euo pipefail
          mkdir -p native-dist
          binary="${{ matrix.binary-path }}"
          if [ ! -f "$binary" ]; then
            echo "Expected native binary not found at $binary"
            echo "Listing contents of target for debugging:"
            find target -maxdepth 3 -type f -print || true
            binary=$(find target -maxdepth 3 -type f -name "${{ matrix.binary-glob }}" | head -n 1)
            if [ -z "$binary" ]; then
              echo "Unable to locate native binary"
              exit 1
            fi
            echo "Using detected binary at $binary"
          fi
          cp "$binary" "native-dist/${{ matrix.artifact-file-name }}"
          chmod +x "native-dist/${{ matrix.artifact-file-name }}"
        shell: bash

      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          New-Item -ItemType Directory -Path native-dist -Force | Out-Null
          $binary = "${{ matrix.binary-path }}"
          if (-not (Test-Path $binary)) {
            Write-Host "Expected native binary not found at $binary"
            Write-Host "Listing contents of target for debugging:"
            Get-ChildItem -Recurse -File target | ForEach-Object { $_.FullName }
            $binary = Get-ChildItem -Recurse -File target -Filter "${{ matrix.binary-glob }}" | Select-Object -First 1
            if (-not $binary) {
              throw "Unable to locate native binary"
            }
            Write-Host "Using detected binary at $($binary.FullName)"
          }
          $binaryPath = if ($binary -is [System.IO.FileInfo]) { $binary.FullName } else { $binary }
          Copy-Item $binaryPath "native-dist/${{ matrix.artifact-file-name }}" -Force
        shell: pwsh

      - name: Upload native binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: native-dist/${{ matrix.artifact-file-name }}

  pr-review-report:
    if: github.event_name == 'pull_request'
    needs:
      - build
      - native-images
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      actions: read
      contents: read
    steps:
      - name: Collect artifact metadata
        id: artifact-metadata
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.paginate(
              github.rest.actions.listWorkflowRunArtifacts,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
                per_page: 100,
              }
            );
            const artifactLinks = artifacts.map((artifact) => ({
              name: artifact.name,
              url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/artifacts/${artifact.id}`,
            }));
            core.setOutput('artifacts', JSON.stringify(artifactLinks));

      - name: Upsert PR build summary comment
        uses: actions/github-script@v7
        env:
          ARTIFACTS: ${{ steps.artifact-metadata.outputs.artifacts }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
        with:
          script: |
            const prNumber = context.payload.pull_request?.number;
            if (!prNumber) {
              core.info('No pull request number available. Skipping comment creation.');
              return;
            }

            const marker = '<!-- pr-build-summary -->';
            const artifacts = JSON.parse(process.env.ARTIFACTS || '[]');
            const sonarHost = (process.env.SONAR_HOST_URL || '').replace(/\/$/, '');
            const sonarProjectKey = process.env.SONAR_PROJECT_KEY;
            const sonarUrl = sonarHost && sonarProjectKey
              ? `${sonarHost}/dashboard?id=${encodeURIComponent(sonarProjectKey)}&pullRequest=${prNumber}`
              : null;

            const pr = context.payload.pull_request;
            const artifactLines = artifacts.length
              ? artifacts.map((artifact) => `- [${artifact.name}](${artifact.url})`).join('\n')
              : '_No artifacts were published in this run._';

            const body = `${marker}\n` +
              `### PR Build Summary\n` +
              `- **Title:** ${pr.title}\n` +
              `- **Author:** @${pr.user.login}\n` +
              `- **Head:** ${pr.head.label}\n` +
              `- **Commit:** ${pr.head.sha}\n` +
              (sonarUrl ? `- **SonarQube:** [View analysis](${sonarUrl})\n` : '') +
              `\n### Downloadable Artifacts\n` +
              `${artifactLines}`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              per_page: 100,
            });

            const existing = comments.find((comment) => comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body,
              });
            }

  publish-release:
    if: github.event_name == 'release'
    needs:
      - build
      - native-images
    runs-on: ubuntu-latest
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Attach assets to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-assets/cn1-mcp-stdio-jar/cn1-mcp-stdio.jar
            release-assets/cn1-mcp-stdio-linux/cn1-mcp-stdio-linux
            release-assets/cn1-mcp-stdio-macos/cn1-mcp-stdio-macos
            release-assets/cn1-mcp-stdio-windows/cn1-mcp-stdio-windows.exe
